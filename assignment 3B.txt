pragma solidity 0.8.4;
import"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol";

contract mytoken is  ERC20{

  constructor ()ERC20("mytoken","mt")
  {owner=msg.sender; 
       }
     uint  cap=200;
  address owner;


      uint rate=100;
     uint deploymenttime=block.timestamp;
    uint duetime =30 days;
    //step 1 :cap
    function _mint(address account, uint256 amount) internal virtual override {
        
        require(ERC20.totalSupply() + amount <= cap, "ERC20Capped: cap exceeded");
        super._mint(account, amount);
    }

   function buytoken( )external payable {
       _mint  (msg.sender,msg.value*rate);
       
   } 
   
  

   function adjustprice(uint newprice) external  returns(uint) {
       require (msg.sender==owner ,"only owner can adjust price");
      
       rate=newprice;
       return newprice;
       
   }
  
   
    
 
    function transfer(address recipient, uint256 amount) public  virtual override returns (bool) {
         require (block.timestamp==deploymenttime+duetime,'cant transfer before 30 days');//time bound fearture 
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    fallback () external payable {
        if (msg.value>0){
        _mint (msg.sender,msg.value*rate*10**18);}
    }
   
}
